 //генерит все правильно, правда € провер€ла на простых сет€х
 
 private List<string[]> generateList(List<Position> arr_pos, List<Transition> arr_trans)
        {
            List<string[]> mmt = new List<string[]>();
            int[] initmark = new int[arr_pos.Count];
            int[] currmark = new int[arr_pos.Count];
            int[] newmark  = new int[arr_pos.Count];
            List<int[]> list_mark = new List<int[]>();
            int[,] di = new int[arr_trans.Count(), arr_pos.Count()];
            int[,] dq = new int[arr_trans.Count, arr_pos.Count];
            bool choice = true;
            bool end = false;            
            int mark_ptr = 1;
            //начальна€ маркировка
            for (int i = 0; i < arr_pos.Count; i++)
            {
                initmark[i] = ((Position)arr_pos[i]).Tokens;
            }
            list_mark.Add(initmark);

            currmark = new int[arr_pos.Count];

            for (int i = 0; i < arr_pos.Count; i++)
            {
                currmark[i] = initmark[i];
            }
            //ƒи
            for (int j = 0; j < arr_trans.Count; j++)
            {
                for (int i = 0; i < arr_pos.Count; i++)
                {
                    if (((Position)arr_pos[i]).DictOfIn.ContainsKey(arr_trans[j]))
                    {
                        di[j, i] = ((Position)arr_pos[i]).DictOfIn[arr_trans[j]];
                    }
                    else
                    {
                        di[j, i] = 0;
                    }
                }
            }
            //ƒкью
            for (int j = 0; j < arr_trans.Count; j++)
            {
                for (int i = 0; i < arr_pos.Count; i++)
                {
                    if (((Transition)arr_trans[j]).DictOfIn.ContainsKey(arr_pos[i]))
                    {
                        dq[j, i] = ((Transition)arr_trans[j]).DictOfIn[arr_pos[i]];
                    }
                    else
                    {
                        dq[j, i] = 0;
                    }
                }
            }

            //начало обхода
            while (!end)
            {
                //начало нового €руса, ветки

                for (int j = 0; j < arr_trans.Count; j++)
                {
                    choice = false;
                    for (int i = 0; i < arr_pos.Count; i++)
                    {
                        if (currmark[i] * di[j, i] != 0 && currmark[i] >= di[j, i])
                        {
                            choice = true;
                        }
                    }

                    //если переход произойдет
                    if (choice)
                    {
                        //нова€ маркировка
                        for (int q = 0; q < arr_pos.Count; q++)
                        {
                            newmark[q] = currmark[q] - di[j, q] + dq[j, q];
                        }

                        //this.Text += " /curm : " + currmark[0] + " " + currmark[1] + " --> ";
                        //this.Text += "newm : " + newmark[0] + " " + newmark[1] + " / ";

                        //добавл€ем новую маркировку
                        bool containsMark = true;
                        foreach (int[] mark in list_mark)
                        {
                            containsMark = true;
                            for (int i = 0; i < mark.Length; i++)
                            {
                                containsMark &= (mark[i] == newmark[i]);
                            }
                            if (containsMark) { break; }
                        }

                        if (!containsMark)
                        {
                            int[] buf = new int[newmark.Length];
                            for (int i = 0; i < buf.Length; i++)
                            {
                                buf[i] = newmark[i];
                            }
                            list_mark.Add(buf);
                        }
                        else
                        {
                        }
                        //========
                        string[] buff = new string[3];
                        bool equals = true;

                        for (int q = 0; q < list_mark.Count; q++)
                        {
                            equals = true;
                            for (int i = 0; i < currmark.Length; i++)
                            {
                                equals &= ((list_mark.ElementAt(q))[i] == currmark[i]);
                            }
                            if (equals) { buff[0] = "" + q; break; }
                        }

                        for (int q = 0; q < list_mark.Count; q++)
                        {
                            equals = true;
                            for (int i = 0; i < currmark.Length; i++)
                            {
                                equals &= ((list_mark.ElementAt(q))[i] == newmark[i]);
                            }
                            if (equals) { buff[1] = "" + q; break; }
                        }
                        buff[2] = arr_trans[j].Name;
                        mmt.Add(buff);
                        //=========
                    }
                }

                try
                {
                    for (int q = 0; q < currmark.Length; q++)
                    {
                        currmark[q] = (list_mark[mark_ptr])[q];
                    }

                    mark_ptr++;
                   
                }
                catch (Exception)
                {
                    end = true;
                }
                //if (tier == 10) break;
            };           

            return mmt;
        }